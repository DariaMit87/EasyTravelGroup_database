-- Customer Table (Supertype)
CREATE TABLE Customer (
    customer_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL
);

-- Regular Customer Table (Subtype of Customer)
CREATE TABLE Regular_Customer (
    customer_id INT PRIMARY KEY,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE
);

-- Loyalty Customer Table (Subtype of Customer)
CREATE TABLE Loyalty_Customer (
    customer_id INT PRIMARY KEY,
    membership_id INT UNIQUE NOT NULL,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE
);

-- Loyalty Program Table
CREATE TABLE Loyalty_Program (
    membership_id SERIAL PRIMARY KEY,
    customer_id INT UNIQUE NOT NULL,
    membership_tier VARCHAR(50) CHECK (membership_tier IN ('Silver', 'Gold', 'Platinum')),
    available_points INT DEFAULT 0,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE
);

-- Relationship: Participates In Loyalty Program
ALTER TABLE Loyalty_Customer
ADD FOREIGN KEY (membership_id) REFERENCES Loyalty_Program(membership_id) ON DELETE CASCADE;



CREATE TABLE Travel_Service (
    service_id SERIAL PRIMARY KEY,
    service_type VARCHAR(50) CHECK (service_type IN ('Flight', 'Accommodation', 'Transfer'))
);


-- Flight Table
CREATE TABLE Flight (
    flight_id SERIAL PRIMARY KEY,
    service_id INT UNIQUE NOT NULL REFERENCES Travel_Service(service_id) ON DELETE CASCADE,
    airline_name VARCHAR(255) NOT NULL,
    departure_location VARCHAR(255) NOT NULL,
    arrival_location VARCHAR(255) NOT NULL,
    departure_date_time TIMESTAMP NOT NULL,
    seat_capacity INT NOT NULL,
    price_per_seat DECIMAL(10,2) NOT NULL,
    optional_services TEXT
) INHERITS (Travel_Service);

CREATE TABLE Accommodation (
    accommodation_id SERIAL PRIMARY KEY,
    service_id INT UNIQUE NOT NULL REFERENCES Travel_Service(service_id) ON DELETE CASCADE,
    name VARCHAR(255) NOT NULL,
    location VARCHAR(255) NOT NULL,
    type VARCHAR(100) NOT NULL CHECK (type IN ('Hotel', 'Resort', 'Apartment', 'Vacation Home')),
    room_type VARCHAR(100) NOT NULL,
    price_per_night DECIMAL(10,2) NOT NULL,
    add_ons TEXT
) INHERITS (Travel_Service);

CREATE TABLE Transfer (
    transfer_id SERIAL PRIMARY KEY,
    service_id INT UNIQUE NOT NULL REFERENCES Travel_Service(service_id) ON DELETE CASCADE,
    transfer_type VARCHAR(50) NOT NULL CHECK (transfer_type IN ('Shared', 'Private')),
    price DECIMAL(10,2) NOT NULL,
    pickup_location VARCHAR(255) NOT NULL,
    drop_off_location VARCHAR(255) NOT NULL,
    special_requests TEXT
) INHERITS (Travel_Service);


-- Travel Agent Table
CREATE TABLE Travel_Agent (
    agent_id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    agency_name VARCHAR(255),
    clients_managed INT DEFAULT 0
);

-- Booking Table
CREATE TABLE Booking (
    booking_id SERIAL PRIMARY KEY,
    customer_id INT NOT NULL,
    agent_id INT NULL,
    service_id INT NOT NULL,  -- Instead of referencing flights, hotels, or transfers separately
    number_of_days INT DEFAULT 1,
    seat_class VARCHAR(50) CHECK (seat_class IN ('Economy', 'Business', 'First Class')),
    points_earned INT DEFAULT 0,
    booking_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    total_price DECIMAL(10,2) NOT NULL,
    payment_id INT NULL,  -- Linked after payment processing
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE,
    FOREIGN KEY (agent_id) REFERENCES Travel_Agent(agent_id) ON DELETE SET NULL,
    FOREIGN KEY (service_id) REFERENCES Travel_Service(service_id) ON DELETE CASCADE
);

-- Payment Table
CREATE TABLE Payment (
    payment_id SERIAL PRIMARY KEY,
    booking_id INT UNIQUE NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    payment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR(50) CHECK (payment_method IN ('Credit Card', 'Bank Transfer', 'Loyalty Points')),
    refund_status BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (booking_id) REFERENCES Booking(booking_id) ON DELETE CASCADE
);

-- Payment Using Loyalty Points
CREATE TABLE Pays_With (
    membership_id INT NOT NULL,
    payment_id INT NOT NULL,
    PRIMARY KEY (membership_id, payment_id),
    FOREIGN KEY (membership_id) REFERENCES Loyalty_Program(membership_id) ON DELETE CASCADE,
    FOREIGN KEY (payment_id) REFERENCES Payment(payment_id) ON DELETE CASCADE
);

-- Feedback Table
CREATE TABLE Feedback (
    feedback_id SERIAL PRIMARY KEY,
    booking_id INT NOT NULL,
    customer_id INT NOT NULL,
    feedback_type VARCHAR(50) CHECK (feedback_type IN ('Flight', 'Accommodation', 'Transfer', 'Overall')),
    rating INT CHECK (rating BETWEEN 1 AND 5),
    comments TEXT,
    FOREIGN KEY (booking_id) REFERENCES Booking(booking_id) ON DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES Customer(customer_id) ON DELETE CASCADE
);




-- Create roles for different types of users
CREATE ROLE admin;
CREATE ROLE travel_agent;
CREATE ROLE customer;

-- Grant full access to admin
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO admin;

-- Grant permissions to travel_agent
GRANT SELECT, INSERT, UPDATE, DELETE ON Booking TO travel_agent;
GRANT SELECT ON Flight, Accommodation, Transfer TO travel_agent;


-- Grant permissions to customer
GRANT SELECT ON "User" TO customer;
GRANT SELECT ON Booking, Feedback, LoyaltyProgram TO customer;


CREATE USER daria_admin WITH PASSWORD '123';
CREATE USER bill_agent WITH PASSWORD '456';
CREATE USER anna_customer WITH PASSWORD '789';

GRANT admin TO daria_admin;
GRANT travel_agent TO bill_agent;
GRANT customer TO anna_customer;

REVOKE ALL ON DATABASE easytravelgroup FROM PUBLIC;

ALTER ROLE admin WITH LOGIN;
ALTER ROLE customer WITH LOGIN;
ALTER ROLE travel_agent WITH LOGIN;